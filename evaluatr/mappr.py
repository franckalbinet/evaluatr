"""Scale up evaluation report mapping against evaluation frameworks using agentic workflows"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/06_mappr.ipynb.

# %% auto 0
__all__ = ['GEMINI_API_KEY', 'cfg', 'find_section_path', 'get_content_tool', 'EnablersCrossCuttingOverview',
           'EnablersCrossCuttingExploration']

# %% ../nbs/06_mappr.ipynb 4
from pathlib import Path
from functools import reduce
from toolslm.md_hier import *
from rich import print
import json
from fastcore.all import *

from typing import List
import dspy

from .frameworks import IOMEvalData

# %% ../nbs/06_mappr.ipynb 5
from dotenv import load_dotenv
import os

load_dotenv()
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')

# %% ../nbs/06_mappr.ipynb 6
cfg = AttrDict({
    'lm': 'gemini/gemini-2.0-flash-exp',
    'api_key': GEMINI_API_KEY,
    'max_tokens': 8192,
    'track_usage': False,
})

# %% ../nbs/06_mappr.ipynb 11
def find_section_path(
    hdgs: dict, # The nested dictionary structure
    target_section: str # The section name to find
):
    "Find the nested key path for a given section name"
    def search_recursive(current_dict, path=[]):
        for key, value in current_dict.items():
            current_path = path + [key]
            if key == target_section:
                return current_path
            if isinstance(value, dict):
                result = search_recursive(value, current_path)
                if result:
                    return result
        return None
    
    return search_recursive(hdgs)

# %% ../nbs/06_mappr.ipynb 15
def get_content_tool(hdgs, keys_list):
    "Navigate through nested levels using the exact key strings"
    return reduce(lambda current, key: current[key], keys_list, hdgs).text

# %% ../nbs/06_mappr.ipynb 20
class EnablersCrossCuttingOverview(dspy.Signature):
    """Analyze if report covers enablers or cross-cutting priorities"""
    report_headings: str = dspy.InputField(desc="Document structure")
    category_title: str = dspy.InputField(desc="Category title")
    category_description: str = dspy.InputField(desc="Category description")
    
    relevant_sections: List[str] = dspy.OutputField(desc="Potentially relevant sections")
    confidence: float = dspy.OutputField(desc="Confidence 0-1")
    reasoning: str = dspy.OutputField(desc="Why this confidence level")
    next_section: str = dspy.OutputField(desc="Next section to explore, or 'DONE'")

# %% ../nbs/06_mappr.ipynb 24
class EnablersCrossCuttingExploration(dspy.Signature):
    """Explore specific report sections for enablers/cross-cutting evidence"""
    section_content: str = dspy.InputField(desc="Content of current section")
    category_title: str = dspy.InputField(desc="Category title")
    category_description: str = dspy.InputField(desc="Category description")
    evidence_so_far: str = dspy.InputField(desc="Evidence collected from previous sections")
    
    evidence_found: str = dspy.OutputField(desc="New evidence found in this section")
    confidence: float = dspy.OutputField(desc="Updated confidence 0-1")
    reasoning: str = dspy.OutputField(desc="Why this confidence level")
    next_action: str = dspy.OutputField(desc="'EXPLORE:section_name' or 'DONE'")
