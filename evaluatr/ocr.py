"""OCR evaluation reports"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_ocr.ipynb.

# %% auto 0
__all__ = ['mistral_api_key', 'src_dir', 'get_doc_subtype', 'ocr', 'save_page_images', 'setup_output_dirs', 'process_report',
           'process_pdf_page', 'process_pdf', 'process_all_reports']

# %% ../nbs/03_ocr.ipynb 2
import os
import re
import time
from io import BytesIO
from dotenv import load_dotenv
import base64
from fastcore.all import *
from rich import print
import urllib.parse
from pathlib import Path
from tqdm import tqdm

import pandas as pd
from mistralai import Mistral
from PIL import Image
# from tqdm import tqdm

from .readers import load_evals


# %% ../nbs/03_ocr.ipynb 3
load_dotenv()
mistral_api_key = os.getenv("MISTRAL_API_KEY")

# %% ../nbs/03_ocr.ipynb 4
def get_doc_subtype(
    id:str, # ID of the evaluation
    fname:str, # Name of the file
    evals # Evaluations data
    )->str: # Document Subtype
    "Get Document Subtype for a given file in the evaluation dataset"
    eval_data = L(evals).filter(lambda x: x['id']==id)
    if not eval_data: return None
    
    docs = L(eval_data[0]['docs'])
    matches = docs.filter(lambda x: Path(x['File URL']).name==fname)
    return matches[0]['Document Subtype'] if matches else None

# %% ../nbs/03_ocr.ipynb 8
src_dir = Path("../_data/")

# %% ../nbs/03_ocr.ipynb 10
def ocr(
    pdf_path:Union[Path,str], # Path to the PDF file to process
    model:str="mistral-ocr-latest", # Model name to use for OCR processing
    include_images:bool=True, # Whether to include base64-encoded images in the response
    api_key:str=mistral_api_key # Mistral API key for authentication
):
    "Upload a PDF file and process it with OCR in one go"
    if isinstance(pdf_path, str): pdf_path = Path(pdf_path)
    cli = Mistral(api_key=api_key)
    
    uploaded_pdf = cli.files.upload(
        file={
            "file_name": pdf_path.stem,
            "content": pdf_path.read_bytes(),
        },
        purpose="ocr"
    )

    signed_url = cli.files.get_signed_url(file_id=uploaded_pdf.id)
    
    return cli.ocr.process(
        model=model,
        document={
            "type": "document_url",
            "document_url": signed_url.url,
        },
        include_image_base64=include_images
    )

# %% ../nbs/03_ocr.ipynb 25
def save_page_images(
    page, # OCR page object containing images
    dest_folder: Path # Destination folder path
): 
    "Save all images from a page to destination folder as PNG"
    for img in page.images:
        img_data = base64.b64decode(img.image_base64.split(',')[1])
        img_bytes = BytesIO(img_data)
        pil_img = Image.open(img_bytes)
        output_path = dest_folder / img.id
        pil_img.save(output_path)

# %% ../nbs/03_ocr.ipynb 29
def setup_output_dirs(md_library_path="../_data/md_library"):
    "Set up the output directory structure for markdown files"
    md_output_dir = Path(md_library_path)
    mkdir(md_output_dir, parents=True, exist_ok=True, overwrite=False)
    return md_output_dir

# %% ../nbs/03_ocr.ipynb 30
def process_report(
    report_path:Path, # Path to the report directory
    md_output_dir:Path # Path to the output directory
    ) -> tuple[list[Path], str]:
    "Process a single report directory containing PDFs"
    pdfs = report_path.ls(file_exts='.pdf')
    eval_report_path = report_path.name
    mkdir(md_output_dir / eval_report_path, parents=True, exist_ok=True, overwrite=False)
    return pdfs, eval_report_path

# %% ../nbs/03_ocr.ipynb 31
def process_pdf_page(
    pdf_path:Path, # Path to the PDF file
    page_nb:int, # Page number
    md_output_dir:Path, # Path to the output directory
    eval_report_path:str # Name of the report
    ):
    "Process a single page from a PDF, saving markdown and images"""
    pdf_name = clean_pdf_name(pdf_path.name)
    pdf_dir = md_output_dir / eval_report_path / pdf_name
    mkdir(pdf_dir, parents=True, exist_ok=True, overwrite=False)
    
    r = ocr(pdf_path)
    page = r.pages[page_nb]
    
    # Save markdown
    fname_page = f"page_{page_nb+1}.md"
    page_path = pdf_dir / fname_page
    page_path.write_text(page.markdown)
    
    # Save images
    img_dir = pdf_dir / 'img'
    mkdir(img_dir, parents=True, exist_ok=True, overwrite=False)
    if hasattr(page, 'images') and page.images:
        save_page_images(page, img_dir)
    
    return r, page

# %% ../nbs/03_ocr.ipynb 32
def process_pdf(
    pdf_path:Path, # Path to the PDF file
    md_output_dir:Path, # Path to the output directory
    eval_report_path:str # Name of the report
    ):
    "Process all pages in a PDF"
    r = ocr(pdf_path)
    for page_nb in range(len(r.pages)):
        process_pdf_page(pdf_path, page_nb, md_output_dir, eval_report_path)
    return r

# %% ../nbs/03_ocr.ipynb 33
def process_all_reports(
    reports:list[Path], # List of paths to the report directories
    md_library_path="../_data/md_library" # Path to the output directory
    ):
    "Process provided evaluation reports and their PDFs"
    md_output_dir = setup_output_dirs(md_library_path)
        
    for report in tqdm(reports, desc="Processing reports"):
        pdfs, eval_report_path = process_report(report, md_output_dir)
        
        for pdf in tqdm(pdfs, desc=f"Processing PDFs in {eval_report_path}", leave=False):
            process_pdf(pdf, md_output_dir, eval_report_path)
